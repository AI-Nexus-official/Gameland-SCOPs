// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

contract AgentRegistration is Initializable, OwnableUpgradeable {
    struct Agent {
        address agentAddress;
        string agentType;
        string[] capabilities;
        uint256 reputationScore;
        bool isActive;
    }

    mapping(address => Agent) public agents;
    address[] public agentList;

    event AgentRegistered(address indexed agentAddress, string agentType);
    event AgentUpdated(address indexed agentAddress, string agentType);
    event AgentDeactivated(address indexed agentAddress);

    function initialize() public initializer {
        __Ownable_init();
    }

    function registerAgent(string memory _agentType, string[] memory _capabilities) public {
        require(agents[msg.sender].agentAddress == address(0), "Agent already registered");
        
        agents[msg.sender] = Agent({
            agentAddress: msg.sender,
            agentType: _agentType,
            capabilities: _capabilities,
            reputationScore: 100,
            isActive: true
        });
        
        agentList.push(msg.sender);
        emit AgentRegistered(msg.sender, _agentType);
    }

    function updateAgentCapabilities(string[] memory _newCapabilities) public {
        require(agents[msg.sender].agentAddress != address(0), "Agent not registered");
        agents[msg.sender].capabilities = _newCapabilities;
        emit AgentUpdated(msg.sender, agents[msg.sender].agentType);
    }

    function deactivateAgent(address _agentAddress) public onlyOwner {
        require(agents[_agentAddress].isActive, "Agent already inactive");
        agents[_agentAddress].isActive = false;
        emit AgentDeactivated(_agentAddress);
    }

    function updateReputationScore(address _agentAddress, uint256 _newScore) public onlyOwner {
        require(agents[_agentAddress].agentAddress != address(0), "Agent not registered");
        agents[_agentAddress].reputationScore = _newScore;
    }

    function getAgentDetails(address _agentAddress) public view returns (Agent memory) {
        return agents[_agentAddress];
    }

    function getAgentCount() public view returns (uint256) {
        return agentList.length;
    }
}
